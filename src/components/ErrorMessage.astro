---
export interface Props {
  error?: string | null
  className?: string
}

const { error, className = '' } = Astro.props
---

{error && (
  <div class={`error-message ${className}`} role="alert">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="10"></circle>
      <line x1="12" y1="8" x2="12" y2="12"></line>
      <line x1="12" y1="16" x2="12.01" y2="16"></line>
    </svg>
    <span class="error-text">{error}</span>
    <button type="button" class="close-btn" aria-label="エラーを閉じる">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
)}

<script>
  import { clearError } from '../stores/groupStore';

  document.addEventListener('DOMContentLoaded', () => {
    const errorMessages = document.querySelectorAll('.error-message');
    
    errorMessages.forEach(errorMessage => {
      const closeBtn = errorMessage.querySelector('.close-btn');
      
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          clearError();
          errorMessage.remove();
        });
      }
      
      // 5秒後に自動的にエラーメッセージを非表示にする
      setTimeout(() => {
        errorMessage.classList.add('fade-out');
        setTimeout(() => {
          clearError();
          errorMessage.remove();
        }, 300);
      }, 5000);
    });
  });
</script>

<style>
  .error-message {
    display: flex;
    align-items: center;
    gap: var(--spacing-3);
    padding: var(--spacing-4);
    background-color: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.3);
    border-radius: var(--radius-md);
    color: var(--color-error);
    margin-bottom: var(--spacing-4);
    animation: slideIn var(--duration-normal) var(--easing-out);
    box-shadow: var(--shadow-sm);
  }
  
  .error-message svg {
    flex-shrink: 0;
  }
  
  .error-text {
    flex-grow: 1;
    font-weight: var(--font-weight-medium);
    font-size: var(--font-size-sm);
  }
  
  .close-btn {
    flex-shrink: 0;
    background: none;
    border: none;
    color: var(--color-error);
    cursor: pointer;
    padding: var(--spacing-1);
    border-radius: var(--radius-sm);
    transition: all var(--duration-fast) var(--easing-in-out);
  }
  
  .close-btn:hover {
    background-color: rgba(239, 68, 68, 0.1);
  }
  
  .fade-out {
    animation: fadeOut var(--duration-normal) var(--easing-out) forwards;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }
</style> 