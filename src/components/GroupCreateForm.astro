---
import type { Group, TeamMember } from '../lib/schema'

export interface Props {
  members?: TeamMember[]
  existingGroups?: Group[]
}

const propsMembers = Astro.props.members || []
const propsExistingGroups = Astro.props.existingGroups || []

// サーバーサイドで渡されたデータを使用
const teamMembers = propsMembers
const existingGroups = propsExistingGroups
---

<div class="group-create-form glass-adaptive">
  <h2 class="form-title">新しいグループを作成</h2>
  <form id="group-create-form" novalidate>
    <div class="form-group">
      <label for="group-name">
        グループ名 <span class="required">*</span>
      </label>
      <div class="input-wrapper">
        <input
          type="text"
          id="group-name"
          name="groupName"
          required
          placeholder="例: 開発チーム"
          autocomplete="off"
        />
        <div class="input-focus-indicator"></div>
      </div>
    </div>

    <div class="form-group">
      <label for="member-select">
        メンバーを選択 <span class="required">*</span>
      </label>
      <div class="member-selection glass-subtle">
        {teamMembers.map((member) => (
          <label class="member-checkbox">
            <input
              type="checkbox"
              name="memberIds"
              value={member.id}
              data-member-name={member.name}
            />
            <div class="checkbox-custom">
              <svg class="checkbox-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M3.5 8L6.5 11L12.5 5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <span class="member-info">
              <span class="member-name">{member.name}</span>
              <span class="member-email">{member.email}</span>
            </span>
          </label>
        ))}
      </div>
      {teamMembers.length === 0 && (
        <p class="no-members">
          メンバーが登録されていません。先にメンバーを追加してください。
        </p>
      )}
    </div>

    <div class="form-actions">
      <button type="submit" disabled={teamMembers.length === 0} class="btn btn-primary ripple-container button-hover focus-glow">
        <span class="btn-text">グループを作成</span>
      </button>
      <button type="button" id="cancel-btn" class="btn btn-secondary ripple-container button-hover focus-glow">
        <span class="btn-text">キャンセル</span>
      </button>
    </div>
  </form>

  <div id="error-message" class="error-message hidden">
    <svg class="error-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
      <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-width="1.5"/>
      <path d="M8 4.5V8.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
      <circle cx="8" cy="11" r="0.5" fill="currentColor"/>
    </svg>
    <span class="error-text"></span>
  </div>
</div>

<style>
  .group-create-form {
    max-width: 600px;
    margin: 0 auto;
    padding: var(--spacing-8);
    background: var(--color-surface);
    border-radius: var(--radius-xl);
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-lg);
    transition: all var(--duration-normal) var(--easing-in-out);
  }

  /* ガラスモーフィズム効果 */
  .group-create-form.glass {
    background: var(--color-glass-bg);
    backdrop-filter: blur(var(--blur-xl));
    -webkit-backdrop-filter: blur(var(--blur-xl));
    border: 1px solid var(--color-glass-border);
    box-shadow: var(--shadow-glass);
  }

  .glass-subtle {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(var(--blur-md));
    -webkit-backdrop-filter: blur(var(--blur-md));
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  h2 {
    margin-bottom: var(--spacing-8);
    color: var(--color-text-primary);
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
    letter-spacing: -0.02em;
  }

  .form-group {
    margin-bottom: var(--spacing-6);
  }

  label {
    display: block;
    margin-bottom: var(--spacing-3);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
    letter-spacing: 0.01em;
  }

  .required {
    color: var(--color-error);
    font-weight: var(--font-weight-normal);
  }

  /* input要素のラッパー */
  .input-wrapper {
    position: relative;
  }

  input[type="text"] {
    width: 100%;
    padding: var(--spacing-4);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-md);
    font-size: var(--font-size-base);
    transition: all var(--duration-fast) var(--easing-in-out);
    background-color: var(--color-background);
    color: var(--color-text-primary);
    font-weight: var(--font-weight-normal);
  }

  input[type="text"]:focus {
    outline: none;
    border-color: var(--color-primary-500);
    background-color: var(--color-surface);
  }

  /* フォーカスインジケーター */
  .input-focus-indicator {
    position: absolute;
    inset: -2px;
    border-radius: var(--radius-md);
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--duration-fast) var(--easing-in-out);
    background: radial-gradient(
      ellipse at center,
      rgba(90, 122, 255, 0.15) 0%,
      transparent 70%
    );
  }

  input[type="text"]:focus ~ .input-focus-indicator {
    opacity: 1;
  }

  .member-selection {
    max-height: 320px;
    overflow-y: auto;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    padding: var(--spacing-3);
    scrollbar-width: thin;
    scrollbar-color: var(--color-gray-400) transparent;
  }

  .member-selection::-webkit-scrollbar {
    width: 8px;
  }

  .member-selection::-webkit-scrollbar-track {
    background: transparent;
  }

  .member-selection::-webkit-scrollbar-thumb {
    background-color: var(--color-gray-400);
    border-radius: var(--radius-full);
  }

  .member-checkbox {
    display: flex;
    align-items: center;
    padding: var(--spacing-3);
    margin: var(--spacing-1) 0;
    cursor: pointer;
    border-radius: var(--radius-md);
    transition: all var(--duration-fast) var(--easing-in-out);
    position: relative;
  }

  .member-checkbox:hover {
    background-color: var(--color-surface-hover);
    transform: translateX(2px);
  }

  /* カスタムチェックボックス */
  .member-checkbox input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  .checkbox-custom {
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-gray-400);
    border-radius: var(--radius-sm);
    margin-right: var(--spacing-3);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--duration-fast) var(--easing-in-out);
    background-color: var(--color-background);
  }

  .checkbox-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: all var(--duration-fast) var(--easing-in-out);
    color: white;
    pointer-events: none;
  }

  .member-checkbox input[type="checkbox"]:checked ~ .checkbox-custom {
    background-color: var(--color-primary-500);
    border-color: var(--color-primary-500);
  }

  .member-checkbox input[type="checkbox"]:checked ~ .checkbox-custom .checkbox-icon {
    opacity: 1;
    transform: scale(1);
  }

  .member-info {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .member-name {
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
    font-size: var(--font-size-base);
  }

  .member-email {
    font-size: var(--font-size-sm);
    color: var(--color-text-tertiary);
    margin-top: 2px;
  }

  .no-members {
    padding: var(--spacing-6);
    text-align: center;
    color: var(--color-text-tertiary);
    font-style: italic;
    background-color: var(--color-surface);
    border-radius: var(--radius-md);
    border: 1px dashed var(--color-border);
  }

  .form-actions {
    display: flex;
    gap: var(--spacing-4);
    margin-top: var(--spacing-8);
    padding-top: var(--spacing-6);
    border-top: 1px solid var(--color-border);
  }

  .btn {
    padding: var(--spacing-3) var(--spacing-6);
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-in-out);
    position: relative;
    overflow: hidden;
  }

  .btn-text {
    position: relative;
    z-index: 1;
  }

  .btn::before {
    content: '';
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity var(--duration-fast) var(--easing-in-out);
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
  }

  .btn:hover:not(:disabled)::before {
    opacity: 1;
  }

  .btn:active:not(:disabled) {
    transform: translateY(0);
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--color-primary-500), var(--color-primary-600));
    color: white;
    box-shadow: 
      0 2px 4px rgba(90, 122, 255, 0.2),
      0 4px 8px rgba(90, 122, 255, 0.1);
  }

  .btn-primary::before {
    background: linear-gradient(135deg, var(--color-primary-600), var(--color-primary-700));
  }

  .btn-primary:hover:not(:disabled) {
    box-shadow: 
      0 4px 8px rgba(90, 122, 255, 0.3),
      0 8px 16px rgba(90, 122, 255, 0.2);
  }

  .btn-primary:disabled {
    background: linear-gradient(135deg, var(--color-gray-400), var(--color-gray-500));
    cursor: not-allowed;
    box-shadow: none;
  }

  .btn-secondary {
    background: linear-gradient(135deg, var(--color-gray-100), var(--color-gray-200));
    color: var(--color-text-primary);
    box-shadow: var(--shadow-sm);
  }

  .btn-secondary::before {
    background: linear-gradient(135deg, var(--color-gray-200), var(--color-gray-300));
  }

  .btn-secondary:hover {
    box-shadow: var(--shadow-md);
  }

  /* エラーメッセージのスタイル改善 */
  .error-message {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    margin-top: var(--spacing-4);
    padding: var(--spacing-3) var(--spacing-4);
    background-color: rgba(239, 68, 68, 0.05);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: var(--radius-md);
    color: var(--color-error);
    font-size: var(--font-size-sm);
    animation: slideIn var(--duration-fast) var(--easing-in-out);
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .error-icon {
    flex-shrink: 0;
    color: var(--color-error);
  }

  .error-text {
    flex-grow: 1;
  }

  input.error {
    border-color: var(--color-error);
    background-color: rgba(239, 68, 68, 0.02);
  }

  input.error:focus {
    border-color: var(--color-error);
  }

  input.error:focus ~ .input-focus-indicator {
    background: radial-gradient(
      ellipse at center,
      rgba(239, 68, 68, 0.15) 0%,
      transparent 70%
    );
  }

  .hidden {
    display: none !important;
  }
  
  /* より具体的なセレクタで上書きを防ぐ */
  .group-create-form .hidden {
    display: none !important;
  }

  /* ダークモード対応 */
  @media (prefers-color-scheme: dark) {
    .checkbox-custom {
      background-color: var(--color-gray-800);
      border-color: var(--color-gray-600);
    }

    .glass-subtle {
      background: rgba(255, 255, 255, 0.02);
      border-color: rgba(255, 255, 255, 0.05);
    }

    .no-members {
      background-color: var(--color-gray-900);
      border-color: var(--color-gray-700);
    }
  }
</style>

<script define:vars={{ existingGroups }}>
  // 即座に実行される同期的な初期化
  const form = document.getElementById('group-create-form');
  const cancelBtn = document.getElementById('cancel-btn');
  const errorMessage = document.getElementById('error-message');
  const groupNameInput = document.getElementById('group-name');
  
  // E2Eテスト環境の確認
  const isE2E = window.e2eTestMode === true;
  
  // 初期データの設定
  let currentGroups = existingGroups || [];
  let dataAdapter = null;
  
  // E2Eテスト環境の場合、モックデータを即座に設定
  if (isE2E && window.e2eMockData && currentGroups.length === 0) {
    currentGroups = [...window.e2eMockData.groups];
  }
  
  // 非同期でデータアダプターを初期化（本番環境用）
  if (!isE2E) {
    (async () => {
      try {
        const module = await import('../lib/e2eDataAdapter');
        dataAdapter = module.dataAdapter;
      } catch (error) {
        console.error('Failed to load data adapter:', error);
      }
    })();
  }

    // グループ名の重複チェック関数
    function checkDuplicateName(name) {
      const trimmedName = name.trim();
      if (!trimmedName) return false;
      
      return currentGroups.some(g => 
        g.name.toLowerCase() === trimmedName.toLowerCase()
      );
    }

    // グループ名の入力時にリアルタイムでチェック
    groupNameInput?.addEventListener('input', (e) => {
      const isDuplicate = checkDuplicateName(e.target.value);
      if (isDuplicate) {
        showError('このグループ名は既に使用されています。');
        groupNameInput.classList.add('error');
      } else {
        hideError();
        groupNameInput.classList.remove('error');
      }
    });

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const groupName = formData.get('groupName');
      const memberIds = formData.getAll('memberIds');

      // バリデーション
      if (!groupName.trim()) {
        showError('グループ名を入力してください。');
        return;
      }

      // グループ名の重複チェック
      if (checkDuplicateName(groupName)) {
        showError('このグループ名は既に使用されています。');
        groupNameInput.classList.add('error');
        return;
      }

      if (memberIds.length === 0) {
        showError('少なくとも1人のメンバーを選択してください。');
        return;
      }

      try {
        // グループを作成
        let newGroup;
        
        if (dataAdapter) {
          // データアダプターが利用可能な場合
          newGroup = dataAdapter.createGroup(groupName.trim(), memberIds);
        } else {
          // フォールバック: 簡易的なグループ作成
          newGroup = {
            id: `group-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
            name: groupName.trim(),
            memberIds
          };
          currentGroups.push(newGroup);
        }
        
        // 成功メッセージを表示
        console.log('グループが作成されました:', newGroup);
        
        // フォームをリセット
        form.reset();
        
        // カスタムイベントを発火（GroupManagementが期待する形式で）
        const event = new CustomEvent('group-form-submit', {
          detail: { 
            name: groupName.trim(), 
            memberIds: memberIds 
          },
          bubbles: true
        });
        window.dispatchEvent(event);
        
        // デフォルトの成功時の処理 - 新しく作成したグループのカレンダー画面へ遷移
        setTimeout(() => {
          if (!event.defaultPrevented) {
            if (window.location.pathname === '/groups/new') {
              window.location.href = `/groups/${newGroup.id}/weekly-schedule`;
            }
          }
        }, 100);
      } catch (error) {
        showError('グループの作成中にエラーが発生しました。');
        console.error(error);
      }
    });

    cancelBtn?.addEventListener('click', () => {
      // キャンセル時の処理
      if (window.location.pathname === '/groups/new') {
        // グループがある場合は最初のグループのカレンダー画面へ
        if (currentGroups.length > 0) {
          window.location.href = `/groups/${currentGroups[0].id}/weekly-schedule`;
        }
        // グループがない場合はそのままページに留まる
      } else {
        // カスタムイベントを発火
        const event = new CustomEvent('group-form-cancel', {
          bubbles: true
        });
        window.dispatchEvent(event);
        form.reset();
      }
    });

    function showError(message) {
      if (errorMessage) {
        const errorText = errorMessage.querySelector('.error-text');
        if (errorText) {
          errorText.textContent = message;
        }
        errorMessage.classList.remove('hidden');
        setTimeout(() => {
          errorMessage.classList.add('hidden');
        }, 5000);
      }
    }

    function hideError() {
      if (errorMessage) {
        errorMessage.classList.add('hidden');
      }
    }
</script> 