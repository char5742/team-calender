---
import type { Group } from '../lib/schema'

export interface Props {
  group?: Group
  isOpen?: boolean
}

const { group, isOpen = false } = Astro.props
const modalId = `delete-modal-${Date.now()}`
---

<div id={modalId} class={`modal-overlay ${isOpen ? 'open' : ''}`}>
  <div class="modal">
    <div class="modal-header">
      <h3>グループを削除</h3>
    </div>
    <div class="modal-body">
      <p>
        本当に「<strong>{group?.name || ''}</strong>」を削除しますか？
      </p>
      <p class="warning">
        この操作は取り消すことができません。
      </p>
    </div>
    <div class="modal-actions">
      <button type="button" class="btn btn-danger" data-action="delete">
        <span class="btn-text">削除する</span>
        <span class="btn-spinner hidden">
          <svg class="spinner-icon" width="16" height="16" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" stroke-dasharray="31.416" stroke-dashoffset="10">
              <animateTransform attributeName="transform" type="rotate" from="0 12 12" to="360 12 12" dur="1s" repeatCount="indefinite"/>
            </circle>
          </svg>
          削除中...
        </span>
      </button>
      <button type="button" class="btn btn-secondary" data-action="cancel">
        キャンセル
      </button>
    </div>
  </div>
</div>

<script define:vars={{ modalId }}>
  import { isLoadingStore } from '../stores/groupStore';
  
  const modal = document.getElementById(modalId);
  
  if (modal) {
    const deleteButton = modal.querySelector('[data-action="delete"]');
    const cancelButton = modal.querySelector('[data-action="cancel"]');
    const btnText = modal.querySelector('.btn-text');
    const btnSpinner = modal.querySelector('.btn-spinner');
    
    // ローディング状態の購読
    isLoadingStore.subscribe(isLoading => {
      if (deleteButton) {
        deleteButton.disabled = isLoading;
        deleteButton.classList.toggle('loading', isLoading);
      }
      if (cancelButton) {
        cancelButton.disabled = isLoading;
      }
      if (btnText) {
        btnText.classList.toggle('hidden', isLoading);
      }
      if (btnSpinner) {
        btnSpinner.classList.toggle('hidden', !isLoading);
      }
    });
    
    // 削除ボタンのクリックイベント
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        if (!deleteButton.disabled) {
          window.dispatchEvent(new CustomEvent('group-delete-confirm'));
        }
      });
    }

    // キャンセルボタンのクリックイベント
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        if (!cancelButton.disabled) {
          window.dispatchEvent(new CustomEvent('group-delete-cancel'));
        }
      });
    }

    // オーバーレイクリックでモーダルを閉じる
    modal.addEventListener('click', (e) => {
      if (e.target === modal && !isLoadingStore.get()) {
        window.dispatchEvent(new CustomEvent('group-delete-cancel'));
      }
    });
  }
</script>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .modal-overlay.open {
    display: flex;
  }

  .modal {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 90%;
    animation: modalFadeIn 0.2s ease-out;
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e0e0e0;
  }

  .modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
    color: #333;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-body p {
    margin: 0 0 1rem 0;
    color: #555;
  }

  .modal-body p:last-child {
    margin-bottom: 0;
  }

  .modal-body strong {
    color: #333;
  }

  .warning {
    color: #dc3545;
    font-size: 0.875rem;
  }

  .modal-actions {
    padding: 1rem 1.5rem;
    border-top: 1px solid #e0e0e0;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }

  .btn {
    padding: 0.5rem 1.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
    font-weight: 500;
    position: relative;
    min-width: 100px;
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .btn-danger {
    background-color: #dc3545;
    color: white;
  }

  .btn-danger:hover:not(:disabled) {
    background-color: #c82333;
  }

  .btn-danger.loading {
    background-color: #dc3545;
  }

  .btn-secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn-secondary:hover:not(:disabled) {
    background-color: #545b62;
  }

  .btn-text,
  .btn-spinner {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .hidden {
    display: none !important;
  }

  .spinner-icon {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style> 