---
import type { Group } from '../lib/schema'
import { generateModalId } from '../utils/id'

export interface Props {
  group?: Group
  isOpen?: boolean
}

const { group, isOpen = false } = Astro.props
const modalId = generateModalId()
---

<div id={modalId} class={`modal-overlay ${isOpen ? 'open' : ''}`}>
  <div class="modal glass animate-fade-in">
    <div class="modal-header">
      <h3>グループを削除</h3>
    </div>
    <div class="modal-body">
      <p>
        本当に「<strong>{group?.name || ''}</strong>」を削除しますか？
      </p>
      <p class="warning">
        この操作は取り消すことができません。
      </p>
    </div>
    <div class="modal-actions">
      <button type="button" class="btn btn-danger ripple-container button-hover focus-glow" data-action="delete">
        <span class="btn-text">削除する</span>
        <span class="btn-spinner hidden">
          <span class="spinner-dot">●</span>
          削除中...
        </span>
      </button>
      <button type="button" class="btn btn-secondary ripple-container button-hover focus-glow" data-action="cancel">
        キャンセル
      </button>
    </div>
  </div>
</div>

<script define:vars={{ modalId }}>
  // ローディング状態の簡易実装
  const isLoadingStore = {
    get: () => false,
    subscribe: (callback) => {
      // 簡易実装のため、常にfalseを返す
      callback(false);
    }
  };
  
  const modal = document.getElementById(modalId);
  
  if (modal) {
    const deleteButton = modal.querySelector('[data-action="delete"]');
    const cancelButton = modal.querySelector('[data-action="cancel"]');
    const btnText = modal.querySelector('.btn-text');
    const btnSpinner = modal.querySelector('.btn-spinner');
    
    // ローディング状態の購読
    isLoadingStore.subscribe(isLoading => {
      if (deleteButton) {
        deleteButton.disabled = isLoading;
        deleteButton.classList.toggle('loading', isLoading);
      }
      if (cancelButton) {
        cancelButton.disabled = isLoading;
      }
      if (btnText) {
        btnText.classList.toggle('hidden', isLoading);
      }
      if (btnSpinner) {
        btnSpinner.classList.toggle('hidden', !isLoading);
      }
    });
    
    // 削除ボタンのクリックイベント
    if (deleteButton) {
      deleteButton.addEventListener('click', () => {
        if (!deleteButton.disabled) {
          window.dispatchEvent(new CustomEvent('group-delete-confirm'));
        }
      });
    }

    // キャンセルボタンのクリックイベント
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        if (!cancelButton.disabled) {
          window.dispatchEvent(new CustomEvent('group-delete-cancel'));
        }
      });
    }

    // オーバーレイクリックでモーダルを閉じる
    modal.addEventListener('click', (e) => {
      if (e.target === modal && !isLoadingStore.get()) {
        window.dispatchEvent(new CustomEvent('group-delete-cancel'));
      }
    });
  }
</script>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    display: none;
    align-items: center;
    justify-content: center;
    z-index: var(--z-index-modal-backdrop);
  }

  .modal-overlay.open {
    display: flex;
  }

  .modal {
    background-color: var(--color-surface);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-xl);
    max-width: 400px;
    width: 90%;
    animation: modalFadeIn var(--duration-normal) var(--easing-out);
    border: 1px solid var(--color-border);
  }

  /* ガラスモーフィズム効果を適用 */
  .modal.glass {
    background: var(--color-glass-bg);
    backdrop-filter: blur(var(--blur-lg));
    -webkit-backdrop-filter: blur(var(--blur-lg));
    border: 1px solid var(--color-glass-border);
    box-shadow: var(--shadow-glass);
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    padding: var(--spacing-6);
    border-bottom: 1px solid var(--color-border);
  }

  .modal-header h3 {
    margin: 0;
    font-size: var(--font-size-xl);
    color: var(--color-text-primary);
    font-weight: var(--font-weight-semibold);
  }

  .modal-body {
    padding: var(--spacing-6);
  }

  .modal-body p {
    margin: 0 0 var(--spacing-4) 0;
    color: var(--color-text-secondary);
    line-height: var(--line-height-relaxed);
  }

  .modal-body p:last-child {
    margin-bottom: 0;
  }

  .modal-body strong {
    color: var(--color-text-primary);
    font-weight: var(--font-weight-semibold);
  }

  .warning {
    color: var(--color-error);
    font-size: var(--font-size-sm);
  }

  .modal-actions {
    padding: var(--spacing-4) var(--spacing-6);
    border-top: 1px solid var(--color-border);
    display: flex;
    gap: var(--spacing-4);
    justify-content: flex-end;
  }

  .btn {
    padding: var(--spacing-2) var(--spacing-6);
    font-size: var(--font-size-base);
    border: none;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-in-out);
    font-weight: var(--font-weight-medium);
    position: relative;
    min-width: 100px;
    box-shadow: var(--shadow-sm);
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .btn-danger {
    background-color: var(--color-error);
    color: white;
  }

  .btn-danger:hover:not(:disabled) {
    background-color: var(--color-error);
  }

  .btn-danger.loading {
    background-color: var(--color-error);
  }

  .btn-secondary {
    background-color: var(--color-gray-500);
    color: white;
  }

  .btn-secondary:hover:not(:disabled) {
    background-color: var(--color-gray-600);
  }

  .btn-text,
  .btn-spinner {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-2);
  }

  .hidden {
    display: none;
  }
  
  /* より具体的なセレクタで上書きを防ぐ */
  .modal .hidden,
  .modal-overlay .hidden {
    display: none;
  }

  .spinner-dot {
    display: inline-block;
    animation: pulse 1.4s infinite ease-in-out both;
  }

  @keyframes pulse {
    0%, 80%, 100% {
      opacity: 0;
      transform: scale(0.8);
    }
    40% {
      opacity: 1;
      transform: scale(1);
    }
  }
</style> 