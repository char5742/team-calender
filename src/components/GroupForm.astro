---
import type { Group, TeamMember } from '../lib/schema'
import { generateFormId } from '../utils/id'

export interface Props {
  group?: Group
  teamMembers: TeamMember[]
  mode: 'create' | 'edit'
  onSubmit?: (data: { name: string; memberIds: string[] }) => void
  onCancel?: () => void
  existingGroups?: Group[]
}

const { group, teamMembers, mode, existingGroups = [] } = Astro.props
const isEdit = mode === 'edit'
const formId = generateFormId()
---

<div class="group-form" data-existing-groups={JSON.stringify(existingGroups || [])} data-group={group ? JSON.stringify(group) : undefined} data-is-edit={isEdit}>
  <h3>{isEdit ? 'グループを編集' : '新しいグループを作成'}</h3>
  <form id={formId} novalidate>
    <div class="form-group">
      <label for={`${formId}-name`}>グループ名</label>
      <input
        type="text"
        id={`${formId}-name`}
        name="name"
        value={group?.name || ''}
        placeholder="グループ名を入力"
        required
      />
      <div class="error-message hidden" id={`${formId}-name-error`}>
        このグループ名は既に使用されています
      </div>
    </div>

    <div class="form-group">
      <label>メンバーを選択</label>
      <div class="members-selection">
        {teamMembers.map((member) => (
          <label class="member-checkbox">
            <input
              type="checkbox"
              name="memberIds"
              value={member.id}
              checked={group?.memberIds.includes(member.id)}
            />
            <span class="member-info">
              <span class="member-name">{member.name}</span>
              <span class="member-email">{member.email}</span>
            </span>
          </label>
        ))}
      </div>
      <div class="error-message hidden" id={`${formId}-members-error`}>
        少なくとも1人のメンバーを選択してください
      </div>
    </div>

    <div class="form-actions">
      <button type="submit" class="btn btn-primary">
        {isEdit ? '更新' : '作成'}
      </button>
      <button type="button" class="btn btn-secondary" data-action="cancel">
        キャンセル
      </button>
    </div>
  </form>
</div>

<script define:vars={{ formId }}>
  const form = document.getElementById(formId);
  
  if (form) {
    // 親要素からデータ属性を取得
    const formContainer = form.closest('.group-form');
    const existingGroupsData = formContainer?.getAttribute('data-existing-groups');
    const groupData = formContainer?.getAttribute('data-group');
    const isEdit = formContainer?.getAttribute('data-is-edit') === 'true';
    
    // データをパース
    const existingGroups = existingGroupsData ? JSON.parse(existingGroupsData) : [];
    const group = groupData ? JSON.parse(groupData) : null;
    
    // データの準備完了
    
    // グループ名の入力フィールドとエラーメッセージの要素を取得
    const nameInput = document.getElementById(`${formId}-name`);
    const nameError = document.getElementById(`${formId}-name-error`);
    const membersError = document.getElementById(`${formId}-members-error`);
    
    // グループ名の重複チェック関数
    function checkDuplicateName(name) {
      const trimmedName = name.trim();
      if (!trimmedName) return false;
      
      return existingGroups.some(g => {
        // 編集モードの場合、自分自身は除外
        if (isEdit && group && g.id === group.id) return false;
        return g.name.toLowerCase() === trimmedName.toLowerCase();
      });
    }
    
    // グループ名の入力時にリアルタイムでチェック
    if (nameInput) {
      nameInput.addEventListener('input', (e) => {
        const isDuplicate = checkDuplicateName(e.target.value);
        if (isDuplicate) {
          nameError.classList.remove('hidden');
          nameInput.classList.add('error');
        } else {
          nameError.classList.add('hidden');
          nameInput.classList.remove('error');
        }
      });
    }
    
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const name = formData.get('name')?.trim();
      const memberIds = formData.getAll('memberIds');
      
      let hasError = false;
      
      // グループ名のバリデーション
      if (!name) {
        hasError = true;
      } else if (checkDuplicateName(name)) {
        nameError.classList.remove('hidden');
        nameInput.classList.add('error');
        hasError = true;
      } else {
        nameError.classList.add('hidden');
        nameInput.classList.remove('error');
      }
      
      // メンバー数のバリデーション
      if (memberIds.length === 0) {
        membersError.classList.remove('hidden');
        hasError = true;
      } else {
        membersError.classList.add('hidden');
      }
      
      // エラーがなければ送信
      if (!hasError) {
        window.dispatchEvent(new CustomEvent('group-form-submit', {
          detail: { name, memberIds }
        }));
      }
    });

    const cancelButton = form.querySelector('[data-action="cancel"]');
    if (cancelButton) {
      cancelButton.addEventListener('click', () => {
        window.dispatchEvent(new CustomEvent('group-form-cancel'));
      });
    }
  }
</script>

<style>
  .group-form {
    background-color: var(--color-surface);
    padding: var(--spacing-6);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    max-width: 500px;
    box-shadow: var(--shadow-md);
    transition: all var(--duration-normal) var(--easing-in-out);
  }

  /* ガラスモーフィズム効果を追加 */
  .group-form.glass {
    background: var(--color-glass-bg);
    backdrop-filter: blur(var(--blur-lg));
    -webkit-backdrop-filter: blur(var(--blur-lg));
    border: 1px solid var(--color-glass-border);
    box-shadow: var(--shadow-glass);
  }

  h3 {
    margin: 0 0 var(--spacing-6) 0;
    font-size: var(--font-size-xl);
    color: var(--color-text-primary);
    font-weight: var(--font-weight-semibold);
  }

  .form-group {
    margin-bottom: var(--spacing-6);
  }

  label {
    display: block;
    margin-bottom: var(--spacing-2);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
  }

  input[type="text"] {
    width: 100%;
    padding: var(--spacing-3);
    font-size: var(--font-size-base);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    transition: all var(--duration-fast) var(--easing-in-out);
    background-color: var(--color-background);
    color: var(--color-text-primary);
  }

  input[type="text"]:focus {
    outline: none;
    border-color: var(--color-primary-500);
    box-shadow: 0 0 0 3px rgba(90, 122, 255, 0.1);
  }

  .members-selection {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    padding: var(--spacing-2);
    background-color: var(--color-background);
  }

  .member-checkbox {
    display: flex;
    align-items: center;
    padding: var(--spacing-2);
    margin: var(--spacing-1) 0;
    cursor: pointer;
    border-radius: var(--radius-sm);
    transition: background-color var(--duration-fast) var(--easing-in-out);
  }

  .member-checkbox:hover {
    background-color: var(--color-surface-hover);
  }

  .member-checkbox input[type="checkbox"] {
    margin-right: var(--spacing-3);
    cursor: pointer;
  }

  .member-info {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .member-name {
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
  }

  .member-email {
    font-size: var(--font-size-sm);
    color: var(--color-text-tertiary);
  }

  .form-actions {
    display: flex;
    gap: var(--spacing-4);
    justify-content: flex-end;
    margin-top: var(--spacing-8);
    padding-top: var(--spacing-6);
    border-top: 1px solid var(--color-border);
  }

  .btn {
    padding: var(--spacing-2) var(--spacing-6);
    font-size: var(--font-size-base);
    border: none;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-in-out);
    font-weight: var(--font-weight-medium);
    box-shadow: var(--shadow-sm);
  }

  .btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .btn-primary {
    background-color: var(--color-primary-500);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--color-primary-600);
  }

  .btn-secondary {
    background-color: var(--color-gray-500);
    color: white;
  }

  .btn-secondary:hover {
    background-color: var(--color-gray-600);
  }

  .error-message {
    color: var(--color-error);
    font-size: var(--font-size-sm);
    margin-top: var(--spacing-1);
  }

  input.error {
    border-color: var(--color-error);
  }

  input.error:focus {
    border-color: var(--color-error);
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  .hidden {
    display: none;
  }
  
  /* より具体的なセレクタで上書きを防ぐ */
  .group-form .hidden {
    display: none;
  }
</style> 