---
import type { GroupWithMembers } from '../stores/groupStore'

export interface Props {
  groups: GroupWithMembers[]
}

const { groups } = Astro.props
---

<div class="groups-container">
  {groups.length === 0 ? (
    <div class="empty-state">
      <p class="empty-state-title">まだグループがありません</p>
      <p class="empty-state-description">新しいグループを作成してメンバーを管理しましょう</p>
    </div>
  ) : (
    <div class="groups-grid">
      {groups.map((group) => (
        <div class="group-card" data-group-id={group.id}>
          <div class="group-header">
            <h3 class="group-name">{group.name}</h3>
            <span class="member-count">{group.members.length}人</span>
          </div>
          
          <div class="members-list">
            {group.members.map((member) => (
              <div class="member-item">
                <span class="member-name">{member.name}</span>
                <span class="member-email">{member.email}</span>
              </div>
            ))}
          </div>
          
          <div class="group-actions">
            <button 
              class="btn-icon"
              data-action="view"
              data-group-id={group.id}
              title="週間スケジュールを表示"
            >
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <span>スケジュール</span>
            </button>
            <button 
              class="btn-icon"
              data-action="edit"
              data-group-id={group.id}
              title="グループを編集"
            >
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
              <span>編集</span>
            </button>
            <button 
              class="btn-icon btn-danger"
              data-action="delete"
              data-group-id={group.id}
              title="グループを削除"
            >
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6"></polyline>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
              </svg>
              <span>削除</span>
            </button>
          </div>
        </div>
      ))}
    </div>
  )}
</div>

<script>
  // イベント委譲を使用してボタンのイベントハンドリング
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const button = target.closest('button[data-action]');
    
    if (button) {
      const action = button.getAttribute('data-action');
      const groupId = button.getAttribute('data-group-id');
      
      if (action === 'view' && groupId) {
        // スケジュール表示
        window.location.href = `/groups/${groupId}/weekly-schedule`;
      } else if (action === 'edit' && groupId) {
        // 編集イベント
        window.dispatchEvent(new CustomEvent('group-edit', { 
          detail: { groupId } 
        }));
      } else if (action === 'delete' && groupId) {
        // 削除イベント
        window.dispatchEvent(new CustomEvent('group-delete', { 
          detail: { groupId } 
        }));
      }
    }
  });
</script>

<style>
  .groups-container {
    width: 100%;
  }

  /* Empty state */
  .empty-state {
    text-align: center;
    padding: var(--spacing-16) var(--spacing-6);
  }

  .empty-state-title {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
    margin: 0 0 var(--spacing-2) 0;
  }

  .empty-state-description {
    font-size: var(--font-size-base);
    color: var(--color-text-secondary);
    margin: 0;
  }

  /* Groups grid */
  .groups-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: var(--spacing-6);
  }

  /* Group card */
  .group-card {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    padding: var(--spacing-6);
    transition: all var(--duration-fast) var(--easing-out);
  }

  .group-card:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }

  .group-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-4);
  }

  .group-name {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin: 0;
  }

  .member-count {
    font-size: var(--font-size-sm);
    color: var(--color-text-secondary);
    background-color: var(--color-gray-100);
    padding: var(--spacing-1) var(--spacing-2);
    border-radius: var(--radius-sm);
  }

  /* Members list */
  .members-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-3);
    min-height: 120px;
    max-height: 200px;
    overflow-y: auto;
    margin-bottom: var(--spacing-4);
  }

  .members-list::-webkit-scrollbar {
    width: 4px;
  }

  .members-list::-webkit-scrollbar-track {
    background: transparent;
  }

  .members-list::-webkit-scrollbar-thumb {
    background: var(--color-gray-300);
    border-radius: var(--radius-full);
  }

  .member-item {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-1);
    padding-bottom: var(--spacing-3);
    border-bottom: 1px solid var(--color-border);
  }

  .member-item:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .member-item .member-name {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
  }

  .member-item .member-email {
    font-size: var(--font-size-xs);
    color: var(--color-text-tertiary);
  }

  /* Group actions */
  .group-actions {
    display: flex;
    gap: var(--spacing-2);
    padding-top: var(--spacing-4);
    border-top: 1px solid var(--color-border);
  }

  .btn-icon {
    display: flex;
    align-items: center;
    gap: var(--spacing-1);
    padding: var(--spacing-2) var(--spacing-3);
    background-color: transparent;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-out);
    flex: 1;
  }

  .btn-icon:hover {
    background-color: var(--color-surface-hover);
    color: var(--color-text-primary);
    border-color: var(--color-border-hover);
  }

  .btn-icon.btn-danger:hover {
    background-color: var(--color-error);
    color: var(--color-text-inverse);
    border-color: var(--color-error);
  }

  .icon {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .member-count {
      background-color: var(--color-gray-800);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .groups-grid {
      grid-template-columns: 1fr;
      gap: var(--spacing-4);
    }

    .group-card {
      padding: var(--spacing-4);
    }

    .btn-icon span {
      display: none;
    }

    .btn-icon {
      padding: var(--spacing-2);
      justify-content: center;
    }
  }
</style> 