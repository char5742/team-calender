---
import { getLiveCollection } from 'astro:content'
import type { LiveDataEntry } from 'astro'
import type { Group, TeamMember } from '../lib/schema'
import { getAllGroupsWithMembers, groupsStore, teamMembersStore } from '../stores/groupStore'
import GroupDeleteModal from './GroupDeleteModal.astro'
import GroupForm from './GroupForm.astro'
import GroupList from './GroupList.astro'
import LoadingSpinner from './LoadingSpinner.astro'

// サーバーサイドでライブコレクションからデータを取得してストアを初期化
if (import.meta.env.SSR) {
  const groupsRes = await getLiveCollection('groups')
  const membersRes = await getLiveCollection('teamMembers')

  const groupsArr: LiveDataEntry<Group>[] = Array.isArray(groupsRes)
    ? (groupsRes as LiveDataEntry<Group>[])
    : (groupsRes?.entries ?? [])
  const membersArr: LiveDataEntry<TeamMember>[] = Array.isArray(membersRes)
    ? (membersRes as LiveDataEntry<TeamMember>[])
    : (membersRes?.entries ?? [])

  const groupsData: Group[] = groupsArr.map((entry) => entry.data)
  const membersData: TeamMember[] = membersArr.map((entry) => entry.data)

  if (groupsStore.get().length === 0) {
    groupsStore.set(groupsData)
  }
  if (teamMembersStore.get().length === 0) {
    teamMembersStore.set(membersData)
  }
}

const groups = getAllGroupsWithMembers()
const teamMembers = teamMembersStore.get()
---

<div class="group-management">
  <div class="management-header">
    <h2 class="section-title">グループ管理</h2>
    <button id="create-group-btn" class="btn btn-primary">
      新しいグループを作成
    </button>
  </div>

  <!-- エラーメッセージ表示エリア -->
  <div id="error-container"></div>

  <!-- ローディングスピナー -->
  <div id="loading-overlay" class="hidden">
    <LoadingSpinner isLoading={true} fullScreen={true} message="処理中..." />
  </div>

  <!-- グループ一覧 -->
  <div id="group-list-container" class="group-list-container">
    <GroupList groups={groups} />
  </div>

  <!-- グループ作成フォーム -->
  <div id="create-form-container" class="form-container hidden">
    <GroupForm 
      teamMembers={teamMembers}
      mode="create"
      existingGroups={groups.map(g => ({ id: g.id, name: g.name, memberIds: g.memberIds }))}
    />
  </div>

  <!-- グループ編集フォーム -->
  <div id="edit-form-container" class="form-container hidden">
    <div class="form-card">
      <h3 class="form-title">グループを編集</h3>
      <form id="edit-form" novalidate>
        <div class="form-group">
          <label for="edit-name" class="form-label">グループ名</label>
          <input
            type="text"
            id="edit-name"
            name="name"
            class="form-input"
            placeholder="グループ名を入力"
            required
          />
          <div class="error-message hidden" id="edit-name-error">
            このグループ名は既に使用されています
          </div>
        </div>

        <div class="form-group">
          <label class="form-label">メンバーを選択</label>
          <div class="members-selection" id="edit-members-selection">
            <!-- メンバーチェックボックスは動的に生成 -->
          </div>
          <div class="error-message hidden" id="edit-members-error">
            少なくとも1人のメンバーを選択してください
          </div>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary">
            更新
          </button>
          <button type="button" class="btn btn-secondary" data-action="cancel">
            キャンセル
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- 削除確認モーダル -->
  <GroupDeleteModal />
</div>

<style>
  .group-management {
    width: 100%;
  }

  .management-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-8);
  }

  .section-title {
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin: 0;
  }

  .group-list-container {
    transition: opacity var(--duration-fast) var(--easing-out);
  }

  .group-list-container.fade {
    opacity: 0.5;
  }

  .form-container {
    margin-top: var(--spacing-8);
  }

  .form-card {
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    padding: var(--spacing-6);
  }

  .form-title {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin: 0 0 var(--spacing-6) 0;
  }

  .form-actions {
    display: flex;
    gap: var(--spacing-3);
    margin-top: var(--spacing-8);
  }

  .members-selection {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-3);
    max-height: 300px;
    overflow-y: auto;
    padding: var(--spacing-2);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
  }

  .member-checkbox {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-3);
    padding: var(--spacing-2);
    cursor: pointer;
    transition: background-color var(--duration-fast) var(--easing-out);
    border-radius: var(--radius-sm);
  }

  .member-checkbox:hover {
    background-color: var(--color-surface-hover);
  }

  .member-checkbox input[type="checkbox"] {
    margin-top: 2px;
  }

  .member-info {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-1);
  }

  .member-name {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
  }

  .member-email {
    font-size: var(--font-size-xs);
    color: var(--color-text-tertiary);
  }

  .error-message {
    color: var(--color-error);
    font-size: var(--font-size-sm);
    margin-top: var(--spacing-2);
  }

  /* Error container */
  #error-container {
    margin-bottom: var(--spacing-4);
  }

  /* Loading overlay */
  #loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: var(--z-index-modal);
  }
  
  #loading-overlay.hidden {
    display: none !important;
  }

  @media (max-width: 768px) {
    .management-header {
      flex-direction: column;
      align-items: stretch;
      gap: var(--spacing-4);
    }

    .section-title {
      font-size: var(--font-size-xl);
    }

    .form-actions {
      flex-direction: column;
    }

    .form-actions .btn {
      width: 100%;
    }
  }
</style>

<script>
  console.log('GroupManagement script initialized');
  
  // グローバル変数として初期化を示すフラグ
  (window as any).groupManagementInitialized = true;
  
  let currentMode: string | null = null;
  let currentGroupId: string | null = null;
  
  // イベントリスナーを管理するための配列
  const eventHandlers: Array<{ element: EventTarget, event: string, handler: EventListener }> = [];
  
  // 同期的な初期データの設定
  let dataAdapter: any = null;
  
  // ストア関数の実装
  const groupsStore = {
    get: () => {
      return dataAdapter?.getGroups() || [];
    }
  };
  
  const teamMembersStore = {
    get: () => {
      return dataAdapter?.getTeamMembers() || [];
    }
  };
  
  const getAllGroupsWithMembers = () => groupsStore.get();
  
  const createGroup = (name: string, memberIds: string[]) => {
    return dataAdapter?.createGroup(name, memberIds);
  };
  
  const updateGroup = (id: string, data: { name: string, memberIds: string[] }) => {
    dataAdapter?.updateGroup(id, data);
  };
  
  const deleteGroup = (id: string) => {
    dataAdapter?.deleteGroup(id);
  };
  
  const clearError = () => {
    // エラークリア処理は簡略化
  };
  
  // クリーンアップ関数
  function cleanup() {
    eventHandlers.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler);
    });
    eventHandlers.length = 0;
  }
  
  // ページ離脱時のクリーンアップ
  window.addEventListener('beforeunload', cleanup);
  
  // 非同期でデータアダプターを初期化
  (async () => {
    try {
      const module = await import('../lib/e2eDataAdapter');
      dataAdapter = module.dataAdapter;
    } catch (error) {
      console.error('Failed to load data adapter:', error);
    }
  })();
    
    // ローディング状態とエラー状態の簡易実装
    const isLoadingStore = {
      subscribe: (callback: (loading: boolean) => void) => {
        // 初期状態でローディングを非表示にする
        callback(false);
        return () => {}; // unsubscribe function
      }
    };
    
    const errorStore = {
      subscribe: (callback: (error: string | null) => void) => {
        // 簡易実装のため、常にnullを返す
        callback(null);
        return () => {}; // unsubscribe function
      }
    };
    
    // DOM要素
    const createGroupBtn = document.getElementById('create-group-btn');
    const createFormContainer = document.getElementById('create-form-container');
    const editFormContainer = document.getElementById('edit-form-container');
    const listContainer = document.getElementById('group-list-container');
    const errorContainer = document.getElementById('error-container');
    const loadingOverlay = document.getElementById('loading-overlay');
    
    // フォーム表示/非表示関数を先に定義
    function showCreateForm() {
      createFormContainer?.classList.remove('hidden');
      editFormContainer?.classList.add('hidden');
      listContainer?.classList.add('fade');
    }
    
    function showEditForm() {
      editFormContainer?.classList.remove('hidden');
      createFormContainer?.classList.add('hidden');
      listContainer?.classList.add('fade');
    }
    
    function hideForms() {
      createFormContainer?.classList.add('hidden');
      editFormContainer?.classList.add('hidden');
      listContainer?.classList.remove('fade');
    }
    
    // 編集フォームにデータを設定
    function setupEditForm(group: any) {
      const nameInput = document.getElementById('edit-name') as HTMLInputElement;
      if (nameInput) {
        nameInput.value = group.name;
      }
      
      // メンバー選択を更新
      const membersContainer = document.getElementById('edit-members-selection');
      if (membersContainer) {
        const teamMembers = teamMembersStore.get();
        membersContainer.innerHTML = teamMembers.map((member: any) => `
          <label class="member-checkbox">
            <input
              type="checkbox"
              name="memberIds"
              value="${member.id}"
              ${group.memberIds.includes(member.id) ? 'checked' : ''}
            />
            <span class="member-info">
              <span class="member-name">${member.name}</span>
              <span class="member-email">${member.email}</span>
            </span>
          </label>
        `).join('');
      }
    }
    
    // イベントリスナーを即座に登録
    console.log('GroupManagement: Registering event listeners');
    
    // DOMContentLoadedまたは即座に実行
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupEventListeners);
    } else {
      setupEventListeners();
    }
    
    function setupEventListeners() {
      console.log('GroupManagement: Setting up event listeners');
      
      // 初期状態でローディングオーバーレイを確実に非表示にする
      if (loadingOverlay) {
        loadingOverlay.classList.add('hidden');
      }
      
      // ローディング状態の購読
      isLoadingStore.subscribe(isLoading => {
        if (loadingOverlay) {
          if (isLoading) {
            loadingOverlay.classList.remove('hidden');
          } else {
            loadingOverlay.classList.add('hidden');
          }
        }
      });
      
      // エラー状態の購読
      errorStore.subscribe(error => {
        if (errorContainer) {
          if (error) {
            // エラーメッセージを動的に追加
            const errorElement = document.createElement('div');
            errorElement.innerHTML = `
              <div class="error-message" role="alert">
                <span class="badge badge-error badge-sm badge-rounded">!</span>
                <span class="error-text">${error}</span>
                <button type="button" class="close-btn" aria-label="エラーを閉じる">
                  <span class="badge badge-error badge-sm badge-rounded">×</span>
                </button>
              </div>
            `;
            
            const errorMessage = errorElement.firstElementChild as HTMLElement;
            const closeBtn = errorMessage?.querySelector('.close-btn');
            
            if (closeBtn) {
              closeBtn.addEventListener('click', () => {
                clearError();
                if (errorMessage) {
                  errorMessage.remove();
                }
              });
            }
            
            // 5秒後に自動的にエラーメッセージを非表示にする
            setTimeout(() => {
              if (errorMessage) {
                errorMessage.classList.add('fade-out');
                setTimeout(() => {
                  clearError();
                  if (errorMessage) {
                    errorMessage.remove();
                  }
                }, 300);
              }
            }, 5000);
            
            if (errorMessage) {
              errorContainer.appendChild(errorMessage);
            }
          }
        }
      });
      
      // グループ作成ボタン
      createGroupBtn?.addEventListener('click', () => {
        currentMode = 'create';
        currentGroupId = null;
        showCreateForm();
      });
      
      // 編集ボタンのイベント
      const editHandler = (e: Event) => {
        const customEvent = e as CustomEvent;
        console.log('GroupManagement: group-edit event received', customEvent.detail);
        const groupId = customEvent.detail.groupId;
        if (groupId) {
          currentMode = 'edit';
          currentGroupId = groupId;
          
          // 編集対象のグループを取得
          const allGroups = getAllGroupsWithMembers();
          const group = allGroups.find((g: any) => g.id === groupId);
          if (group) {
            setupEditForm(group);
            showEditForm();
          }
        }
      };
      window.addEventListener('group-edit', editHandler);
      eventHandlers.push({ element: window, event: 'group-edit', handler: editHandler });
      
      // 削除ボタンのイベント
      const deleteHandler = (e: Event) => {
        const customEvent = e as CustomEvent;
        console.log('GroupManagement: group-delete event received', customEvent.detail);
        const groupId = customEvent.detail.groupId;
        if (groupId) {
          currentGroupId = groupId;
          // モーダルを表示
          const modal = document.querySelector('.modal-overlay');
          if (modal) {
            modal.classList.add('open');
            // グループ名を設定
            const group = groupsStore.get().find((g: any) => g.id === groupId);
            if (group) {
              const modalGroupName = modal.querySelector('.modal-body strong');
              if (modalGroupName) {
                modalGroupName.textContent = group.name;
              }
            }
          }
        }
      };
      window.addEventListener('group-delete', deleteHandler);
      eventHandlers.push({ element: window, event: 'group-delete', handler: deleteHandler });
      
      // 作成フォームイベント
      const formSubmitHandler = (e: Event) => {
        console.log('group-form-submit event received:', e);
        const customEvent = e as CustomEvent;
        const { name, memberIds } = customEvent.detail;
        console.log('Event detail:', customEvent.detail);
        
        if (currentMode === 'create') {
          console.log('Creating group:', name, memberIds);
          const newGroup = createGroup(name, memberIds);
          console.log('New group created:', newGroup);
          
          if (newGroup) {
            hideForms();
            window.location.reload();
          } else {
            console.error('Failed to create group');
          }
        }
      };
      window.addEventListener('group-form-submit', formSubmitHandler);
      eventHandlers.push({ element: window, event: 'group-form-submit', handler: formSubmitHandler });
      
      const formCancelHandler = () => {
        hideForms();
      };
      window.addEventListener('group-form-cancel', formCancelHandler);
      eventHandlers.push({ element: window, event: 'group-form-cancel', handler: formCancelHandler });
      
      // 削除モーダルイベント
      const deleteConfirmHandler = () => {
        if (currentGroupId) {
          deleteGroup(currentGroupId);
          // モーダルを閉じる
          const modal = document.querySelector('.modal-overlay');
          modal?.classList.remove('open');
          // ページをリロードして更新を反映
          window.location.reload();
        }
      };
      window.addEventListener('group-delete-confirm', deleteConfirmHandler);
      eventHandlers.push({ element: window, event: 'group-delete-confirm', handler: deleteConfirmHandler });
      
      const deleteCancelHandler = () => {
        // モーダルを閉じる
        const modal = document.querySelector('.modal-overlay');
        modal?.classList.remove('open');
        currentGroupId = null;
      };
      window.addEventListener('group-delete-cancel', deleteCancelHandler);
      eventHandlers.push({ element: window, event: 'group-delete-cancel', handler: deleteCancelHandler });
    }
    
    // 編集フォームのイベントリスナー
    const editForm = document.getElementById('edit-form') as HTMLFormElement;
    if (editForm) {
      const nameInput = document.getElementById('edit-name') as HTMLInputElement;
      const nameError = document.getElementById('edit-name-error');
      const membersError = document.getElementById('edit-members-error');
      
      // グループ名の重複チェック関数
      function checkDuplicateName(name: string) {
        const trimmedName = name.trim();
        if (!trimmedName) return false;
        
        const allGroups = groupsStore.get();
        return allGroups.some((g: any) => {
          // 編集中のグループ自身は除外
          if (g.id === currentGroupId) return false;
          return g.name.toLowerCase() === trimmedName.toLowerCase();
        });
      }
      
      // グループ名の入力時にリアルタイムでチェック
      if (nameInput) {
        nameInput.addEventListener('input', (e) => {
          const target = e.target as HTMLInputElement;
          const isDuplicate = checkDuplicateName(target.value);
          if (isDuplicate && nameError) {
            nameError.classList.remove('hidden');
            nameInput.classList.add('error');
          } else if (nameError) {
            nameError.classList.add('hidden');
            nameInput.classList.remove('error');
          }
        });
      }
      
      editForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = new FormData(editForm);
        const name = formData.get('name') as string;
        const memberIds = formData.getAll('memberIds') as string[];
        
        let hasError = false;
        
        // グループ名のバリデーション
        const trimmedName = name?.trim();
        if (!trimmedName) {
          hasError = true;
        } else if (checkDuplicateName(trimmedName) && nameError) {
          nameError.classList.remove('hidden');
          if (nameInput) nameInput.classList.add('error');
          hasError = true;
        } else if (nameError) {
          nameError.classList.add('hidden');
          if (nameInput) nameInput.classList.remove('error');
        }
        
        // メンバー数のバリデーション
        if (memberIds.length === 0 && membersError) {
          membersError.classList.remove('hidden');
          hasError = true;
        } else if (membersError) {
          membersError.classList.add('hidden');
        }
        
        // エラーがなければ送信
        if (!hasError && currentGroupId && trimmedName) {
          updateGroup(currentGroupId, { name: trimmedName, memberIds });
          hideForms();
          window.location.reload();
        }
      });
      
      const cancelButton = editForm.querySelector('[data-action="cancel"]');
      if (cancelButton) {
        cancelButton.addEventListener('click', () => {
          hideForms();
        });
      }
    }
</script> 