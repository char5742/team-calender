---
export interface Props {
  isLoading?: boolean
  size?: 'small' | 'medium' | 'large'
  fullScreen?: boolean
  message?: string
}

const {
  isLoading = false,
  size = 'medium',
  fullScreen = false,
  message = '読み込み中...',
} = Astro.props
---

{isLoading && (
  <div class={`loading-container ${fullScreen ? 'full-screen' : ''}`}>
    <div class={`loading-spinner ${size}`}>
      <div class="spinner">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
      </div>
      {message && <p class="loading-message">{message}</p>}
    </div>
  </div>
)}

<style>
  .loading-container {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }
  
  .loading-container.full-screen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.9);
    z-index: 9999;
  }
  
  .loading-spinner {
    text-align: center;
  }
  
  .spinner {
    display: inline-flex;
    gap: 0.25rem;
  }
  
  .spinner > div {
    background-color: #007bff;
    border-radius: 100%;
    display: inline-block;
    animation: sk-bouncedelay 1.4s infinite ease-in-out both;
  }
  
  /* サイズ別のスタイル */
  .small .spinner > div {
    width: 8px;
    height: 8px;
  }
  
  .medium .spinner > div {
    width: 12px;
    height: 12px;
  }
  
  .large .spinner > div {
    width: 16px;
    height: 16px;
  }
  
  .spinner .bounce1 {
    animation-delay: -0.32s;
  }
  
  .spinner .bounce2 {
    animation-delay: -0.16s;
  }
  
  .loading-message {
    margin-top: 1rem;
    color: #6c757d;
    font-size: 0.875rem;
  }
  
  @keyframes sk-bouncedelay {
    0%, 80%, 100% { 
      transform: scale(0);
      opacity: 0.5;
    } 40% { 
      transform: scale(1.0);
      opacity: 1;
    }
  }
</style> 