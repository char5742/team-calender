---
import type { CalendarEvent, TeamMember, WeeklySchedule } from '../lib/schema'
import { formatDate } from '../utils/dateUtils'

export interface Props {
  weeklySchedule: WeeklySchedule
  members: TeamMember[]
}

const { weeklySchedule, members } = Astro.props

// 週の開始日を取得
const weekStartDate = new Date(weeklySchedule.weekStart)

// 曜日のラベル
const dayLabels = ['月', '火', '水', '木', '金', '土', '日']

// 日付ヘッダーを生成
const dateHeaders = Array.from({ length: 7 }, (_, i) => {
  const date = new Date(weekStartDate)
  date.setDate(date.getDate() + i)
  return {
    dayLabel: dayLabels[i],
    dateStr: formatDate(date, 'M/D'),
    date: date,
  }
})

// 時間範囲（9:00 - 18:00）
const START_HOUR = 9
const END_HOUR = 18
const TOTAL_HOURS = END_HOUR - START_HOUR

// イベントの位置とサイズを計算する関数
function calculateEventPosition(event: CalendarEvent, dayIndex: number) {
  const eventStart = new Date(event.start)
  const eventEnd = new Date(event.end)

  // イベントの開始時刻が何時間目かを計算
  const startHour = eventStart.getHours()
  const startMinute = eventStart.getMinutes()
  const topPercent = ((startHour - START_HOUR + startMinute / 60) / TOTAL_HOURS) * 100

  // イベントの長さを計算
  const durationHours = (eventEnd.getTime() - eventStart.getTime()) / (1000 * 60 * 60)
  const heightPercent = (durationHours / TOTAL_HOURS) * 100

  return {
    top: `${Math.max(0, Math.min(100, topPercent))}%`,
    height: `${Math.max(5, Math.min(100 - topPercent, heightPercent))}%`,
    left: `${(dayIndex * 100) / 7}%`,
    width: `${100 / 7}%`,
  }
}

// 各メンバーの予定を日付ごとに整理
function organizeEventsByDay(events: CalendarEvent[], weekStartDate: Date) {
  const eventsByDay: CalendarEvent[][] = Array.from({ length: 7 }, () => [])

  for (const event of events) {
    const eventStart = new Date(event.start)
    const dayDiff = Math.floor(
      (eventStart.getTime() - weekStartDate.getTime()) / (1000 * 60 * 60 * 24),
    )

    if (dayDiff >= 0 && dayDiff < 7) {
      eventsByDay[dayDiff].push(event)
    }
  }

  return eventsByDay
}
---

<div class="weekly-calendar">
  <div class="calendar-header">
    <div class="corner-cell" aria-hidden="true"></div>
    {dateHeaders.map(header => (
      <div class="day-header" role="columnheader">
        <div class="day-label">{header.dayLabel}</div>
        <div class="date-label">{header.dateStr}</div>
      </div>
    ))}
  </div>

  <div class="calendar-grid" role="grid">
    {members.map((member) => {
      const memberEvents = weeklySchedule.eventsByMember[member.id] || []
      const eventsByDay = organizeEventsByDay(memberEvents, weekStartDate)
      
      return (
        <div class="member-row" role="row">
          <div class="member-name" role="rowheader">
            <span class="member-avatar">{member.name.charAt(0)}</span>
            <span class="member-name-text">{member.name}</span>
          </div>
          <div class="member-schedule">
            {eventsByDay.map((dayEvents, dayIndex) => (
              <div class="day-cell" data-day={dayIndex} role="gridcell">
                {dayEvents.length === 0 && (
                  <div class="empty-state">
                    <span class="empty-dot"></span>
                  </div>
                )}
                {dayEvents.map((event) => {
                  const position = calculateEventPosition(event, dayIndex)
                  // イベントタイプを判定（タイトルから推測）
                  const eventType = event.title.includes('会議') || event.title.includes('ミーティング') 
                    ? 'meeting' 
                    : 'work'
                  
                  return (
                    <div 
                      class="event-block"
                      data-type={eventType}
                      style={`
                        position: absolute;
                        top: ${position.top};
                        height: ${position.height};
                        left: 0;
                        right: 0;
                        background-color: ${event.color || '#1976D2'};
                      `}
                      title={`${event.title} (${new Date(event.start).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })} - ${new Date(event.end).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })})`}
                    >
                      <span class="event-title">{event.title}</span>
                    </div>
                  )
                })}
              </div>
            ))}
          </div>
        </div>
      )
    })}
  </div>
</div>

<style>
  .weekly-calendar {
    background-color: var(--color-surface);
    border-radius: var(--radius-xl);
    border: 1px solid var(--color-border);
    overflow: hidden;
    box-shadow: var(--shadow-lg);
  }

  .calendar-header {
    display: grid;
    grid-template-columns: 140px repeat(7, 1fr);
    background: linear-gradient(to bottom, var(--color-background-secondary), var(--color-background-tertiary));
    border-bottom: 2px solid var(--color-border);
  }

  .corner-cell {
    border-right: 2px solid var(--color-border);
  }

  .day-header {
    padding: var(--spacing-4);
    text-align: center;
    border-right: 1px solid var(--color-border);
    position: relative;
  }

  /* 週末の曜日に背景色を追加 */
  .day-header:nth-child(7),
  .day-header:nth-child(8) {
    background-color: rgba(239, 68, 68, 0.05);
  }

  .day-header:last-child {
    border-right: none;
  }

  .day-label {
    font-weight: var(--font-weight-bold);
    color: var(--color-text-primary);
    margin-bottom: var(--spacing-1);
    font-size: var(--font-size-sm);
  }

  /* 土曜日と日曜日の色分け */
  .day-header:nth-child(7) .day-label {
    color: var(--color-info);
  }

  .day-header:nth-child(8) .day-label {
    color: var(--color-error);
  }

  .date-label {
    font-size: var(--font-size-sm);
    color: var(--color-text-tertiary);
    font-weight: var(--font-weight-medium);
  }

  .calendar-grid {
    min-height: 450px;
  }

  .member-row {
    display: grid;
    grid-template-columns: 140px 1fr;
    border-bottom: 1px solid var(--color-border);
    min-height: 120px;
    transition: background-color var(--duration-fast) var(--easing-in-out);
  }

  .member-row:hover {
    background-color: var(--color-surface-hover);
  }

  .member-row:last-child {
    border-bottom: none;
  }

  .member-name {
    padding: var(--spacing-4);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    background: linear-gradient(to right, var(--color-background-secondary), var(--color-background-tertiary));
    border-right: 2px solid var(--color-border);
    display: flex;
    align-items: center;
    font-size: var(--font-size-base);
    gap: var(--spacing-3);
  }

  .member-avatar {
    width: 32px;
    height: 32px;
    border-radius: var(--radius-full);
    background: linear-gradient(135deg, var(--color-primary-500), var(--color-primary-700));
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-sm);
    flex-shrink: 0;
    box-shadow: var(--shadow-sm);
  }

  .member-name-text {
    flex: 1;
  }

  .member-schedule {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    position: relative;
  }

  .day-cell {
    border-right: 1px solid var(--color-border);
    position: relative;
    min-height: 120px;
    padding: var(--spacing-2);
  }

  /* 週末のセルに背景色 */
  .day-cell[data-day="5"],
  .day-cell[data-day="6"] {
    background-color: rgba(239, 68, 68, 0.02);
  }

  .day-cell:last-child {
    border-right: none;
  }

  .event-block {
    margin: var(--spacing-1);
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-md);
    overflow: hidden;
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-spring);
    box-shadow: var(--shadow-sm);
    border: 1px solid rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .event-block:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .event-title {
    font-size: var(--font-size-xs);
    color: white;
    font-weight: var(--font-weight-semibold);
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }

  /* イベントタイプ別のスタイル */
  .event-block[data-type="meeting"] {
    background: linear-gradient(135deg, var(--color-info), var(--color-primary-600));
  }

  .event-block[data-type="work"] {
    background: linear-gradient(135deg, var(--color-warning), #ea580c);
  }

  /* レスポンシブ対応 */
  @media (max-width: 1024px) {
    .calendar-header,
    .member-row {
      grid-template-columns: 100px repeat(7, 1fr);
    }

    .member-name {
      font-size: var(--font-size-sm);
      padding: var(--spacing-3);
    }
  }

  @media (max-width: 768px) {
    .calendar-header,
    .member-row {
      grid-template-columns: 80px repeat(7, 1fr);
    }

    .member-name {
      font-size: var(--font-size-xs);
      padding: var(--spacing-2);
    }

    .day-header {
      padding: var(--spacing-3) var(--spacing-1);
    }

    .day-label {
      font-size: var(--font-size-xs);
    }

    .date-label {
      font-size: var(--font-size-xs);
    }

    .event-title {
      font-size: 0.7rem;
    }

    .event-block {
      padding: var(--spacing-1) var(--spacing-2);
    }
  }

  /* ダークモード対応 */
  @media (prefers-color-scheme: dark) {
    .day-header:nth-child(7),
    .day-header:nth-child(8) {
      background-color: rgba(239, 68, 68, 0.03);
    }

    .day-cell[data-day="5"],
    .day-cell[data-day="6"] {
      background-color: rgba(239, 68, 68, 0.01);
    }
  }

  .empty-state {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.3;
  }

  .empty-dot {
    width: 6px;
    height: 6px;
    border-radius: var(--radius-full);
    background-color: var(--color-gray-300);
  }
</style> 