---
import type { CalendarEvent, TeamMember, WeeklySchedule } from '../lib/schema'
import { formatDate } from '../utils/dateUtils'

export interface Props {
  weeklySchedule: WeeklySchedule
  members: TeamMember[]
}

const { weeklySchedule, members } = Astro.props

// 週の開始日を取得
const weekStartDate = new Date(weeklySchedule.weekStart)

// 曜日のラベル
const dayLabels = ['月', '火', '水', '木', '金', '土', '日']

// 日付ヘッダーを生成
const dateHeaders = Array.from({ length: 7 }, (_, i) => {
  const date = new Date(weekStartDate)
  date.setDate(date.getDate() + i)
  return {
    dayLabel: dayLabels[i],
    dateStr: formatDate(date, 'M/D'),
    date: date,
  }
})

// 時間範囲（9:00 - 18:00）
const START_HOUR = 9
const END_HOUR = 18
const TOTAL_HOURS = END_HOUR - START_HOUR

// イベントの位置とサイズを計算する関数
function calculateEventPosition(event: CalendarEvent, dayIndex: number) {
  const eventStart = new Date(event.start)
  const eventEnd = new Date(event.end)

  // イベントの開始時刻が何時間目かを計算
  const startHour = eventStart.getHours()
  const startMinute = eventStart.getMinutes()
  const topPercent = ((startHour - START_HOUR + startMinute / 60) / TOTAL_HOURS) * 100

  // イベントの長さを計算
  const durationHours = (eventEnd.getTime() - eventStart.getTime()) / (1000 * 60 * 60)
  const heightPercent = (durationHours / TOTAL_HOURS) * 100

  return {
    top: `${Math.max(0, Math.min(100, topPercent))}%`,
    height: `${Math.max(5, Math.min(100 - topPercent, heightPercent))}%`,
    left: `${(dayIndex * 100) / 7}%`,
    width: `${100 / 7}%`,
  }
}

// 各メンバーの予定を日付ごとに整理
function organizeEventsByDay(events: CalendarEvent[], weekStartDate: Date) {
  const eventsByDay: CalendarEvent[][] = Array.from({ length: 7 }, () => [])

  for (const event of events) {
    const eventStart = new Date(event.start)
    const dayDiff = Math.floor(
      (eventStart.getTime() - weekStartDate.getTime()) / (1000 * 60 * 60 * 24),
    )

    if (dayDiff >= 0 && dayDiff < 7) {
      eventsByDay[dayDiff].push(event)
    }
  }

  return eventsByDay
}
---

<div class="weekly-calendar">
  <div class="calendar-header">
    <div class="corner-cell"></div>
    {dateHeaders.map(header => (
      <div class="day-header">
        <div class="day-label">{header.dayLabel}</div>
        <div class="date-label">{header.dateStr}</div>
      </div>
    ))}
  </div>

  <div class="calendar-grid">
    {members.map((member) => {
      const memberEvents = weeklySchedule.eventsByMember[member.id] || []
      const eventsByDay = organizeEventsByDay(memberEvents, weekStartDate)
      
      return (
        <div class="member-row">
          <div class="member-name">{member.name}</div>
          <div class="member-schedule">
            {eventsByDay.map((dayEvents, dayIndex) => (
              <div class="day-cell" data-day={dayIndex}>
                {dayEvents.map((event) => {
                  const position = calculateEventPosition(event, dayIndex)
                  return (
                    <div 
                      class="event-block"
                      style={`
                        position: absolute;
                        top: ${position.top};
                        height: ${position.height};
                        left: 0;
                        right: 0;
                        background-color: ${event.color || '#1976D2'};
                      `}
                    >
                      <span class="event-title">{event.title}</span>
                    </div>
                  )
                })}
              </div>
            ))}
          </div>
        </div>
      )
    })}
  </div>
</div>

<style>
  .weekly-calendar {
    background-color: white;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    overflow: hidden;
  }

  .calendar-header {
    display: grid;
    grid-template-columns: 120px repeat(7, 1fr);
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
  }

  .corner-cell {
    border-right: 1px solid #e0e0e0;
  }

  .day-header {
    padding: 1rem;
    text-align: center;
    border-right: 1px solid #e0e0e0;
  }

  .day-header:last-child {
    border-right: none;
  }

  .day-label {
    font-weight: 600;
    color: #333;
    margin-bottom: 0.25rem;
  }

  .date-label {
    font-size: 0.875rem;
    color: #6c757d;
  }

  .calendar-grid {
    min-height: 400px;
  }

  .member-row {
    display: grid;
    grid-template-columns: 120px 1fr;
    border-bottom: 1px solid #e0e0e0;
    min-height: 100px;
  }

  .member-row:last-child {
    border-bottom: none;
  }

  .member-name {
    padding: 1rem;
    font-weight: 500;
    color: #333;
    background-color: #f8f9fa;
    border-right: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
  }

  .member-schedule {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    position: relative;
  }

  .day-cell {
    border-right: 1px solid #e0e0e0;
    position: relative;
    min-height: 100px;
  }

  .day-cell:last-child {
    border-right: none;
  }

  .event-block {
    margin: 2px;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    transition: opacity 0.2s;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .event-block:hover {
    opacity: 0.9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .event-title {
    font-size: 0.75rem;
    color: white;
    font-weight: 500;
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  /* レスポンシブ対応（基本的なもの） */
  @media (max-width: 768px) {
    .calendar-header,
    .member-row {
      grid-template-columns: 80px repeat(7, 1fr);
    }

    .member-name {
      font-size: 0.875rem;
      padding: 0.75rem 0.5rem;
    }

    .day-header {
      padding: 0.75rem 0.5rem;
    }

    .event-title {
      font-size: 0.625rem;
    }
  }
</style> 