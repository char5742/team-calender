---
import type { CalendarEvent } from '../../lib/schema.ts'
import { getEventType } from '../../utils/calendarUtils.ts'

export interface Props {
  event: CalendarEvent
}

const { event: calendarEvent } = Astro.props as { event: CalendarEvent }
const eventType = getEventType(calendarEvent)
---

<div
  class={`block event-block minimal-hover ${calendarEvent.allDay ? 'all-day' : ''} label-${(calendarEvent.label ?? 'default').toLowerCase()}`}
  data-type={eventType}
  data-label={calendarEvent.label ?? 'default'}
  data-event-id={calendarEvent.id}
  data-all-day={calendarEvent.allDay}
  tabindex="0"
  role="button"
  aria-label={`${calendarEvent.title} - ${calendarEvent.allDay ? '終日' : `${new Date(calendarEvent.start).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}から${new Date(calendarEvent.end).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}まで`}`}
>
  <div class="time">
    {calendarEvent.allDay ? (
      <span class="all-day-label">終日</span>
    ) : (
      <>
        {new Date(calendarEvent.start).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}
        {' - '}
        {new Date(calendarEvent.end).toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' })}
      </>
    )}
  </div>
  <div class="title">{calendarEvent.title}</div>
  {calendarEvent.label && <div class="category">{calendarEvent.label}</div>}
</div>

<style>
  .block {
    --event-border-color: var(--color-primary);
    padding: var(--spacing-1) var(--spacing-3);
    border-radius: var(--radius-sm);
    cursor: pointer;
    transition: all var(--duration-fast) var(--easing-in-out);
    color: var(--color-text-primary);
    font-size: var(--font-size-xs);
    background-color: var(--color-background-secondary);
    border-left: 4px solid var(--event-border-color);
    position: relative;

    &:hover {
      transform: translateX(2px);
      box-shadow: var(--shadow-sm);
      background-color: var(--color-surface);
    }
  }

  .time {
    font-size: 0.625rem;
    opacity: 0.7;
    margin-bottom: 2px;
    color: var(--color-text-secondary);
  }

  .title {
    font-weight: var(--font-weight-medium);
    line-height: 1.2;
    margin-bottom: 2px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    color: var(--color-text-primary);
  }

  .category {
    font-size: 0.625rem;
    opacity: 0.6;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: var(--color-text-tertiary);
  }

  /* Type variations */
  .block[data-type="meeting"],
  .block[data-type="work"] {
    background: var(--color-background-secondary);
  }

  /* All-day */
  .all-day {
    opacity: 0.7;
    background: var(--color-gray-50);
    border-left: none;
    border-top: 3px solid var(--event-border-color);
    padding-top: var(--spacing-2);

    &:hover {
      opacity: 0.9;
      background: var(--color-gray-100);
    }
  }

  .all-day-label {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 0.625rem;
    color: var(--color-text-tertiary);
  }

  /* Label colors */
  .label-meeting      { --event-border-color: #a5d8ff; }
  .label-outofoffice  { --event-border-color: #b9f6ca; }
  .label-vacation     { --event-border-color: #ffadad; }
  .label-documentwork { --event-border-color: #d8b4fe; }
  .label-other        { --event-border-color: #ffd88d; }

  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    .block {
      background-color: var(--color-surface);

      &:hover {
        background-color: var(--color-background-secondary);
      }
    }
    .all-day {
      background: rgba(255, 255, 255, 0.05);

      &:hover {
        opacity: 1;
        background: rgba(255, 255, 255, 0.08);
      }
    }
  }
</style> 