---
import WeeklyCalendarView from '../../../components/WeeklyCalendarView.astro'
import Layout from '../../../layouts/Layout.astro'
import { loadMockData, mockCalendarEvents } from '../../../lib/mockData'
import { groupsStore, selectedGroupIdStore, teamMembersStore } from '../../../stores/groupStore'
import type { GroupWithMembers } from '../../../stores/groupStore'
import { currentWeekStartStore, getWeeklySchedule } from '../../../stores/weeklyScheduleStore'
import { addWeeks, getWeekStart } from '../../../utils/dateUtils'

// 動的ルートのために必要な関数
export function getStaticPaths() {
  loadMockData()
  const groups = groupsStore.get()
  return groups.map((group) => ({
    params: { groupId: group.id },
  }))
}

// モックデータを読み込む
loadMockData()

// パラメータからグループIDを取得
const { groupId } = Astro.params

// URLパラメータから週のオフセットを取得
const url = new URL(Astro.request.url)
const weekOffset = Number.parseInt(url.searchParams.get('week') || '0')

// 表示する週の開始日を計算
const baseWeekStart = getWeekStart(new Date())
const displayWeekStart = addWeeks(baseWeekStart, weekOffset)

// 一時的に現在の週を設定
currentWeekStartStore.set(displayWeekStart.toISOString())

// グループデータを取得
const groups = groupsStore.get()
const teamMembers = teamMembersStore.get()
const group = groups.find((g) => g.id === groupId)

if (!group) {
  return Astro.redirect('/404')
}

// グループのメンバー情報を取得
const groupWithMembers: GroupWithMembers = {
  ...group,
  members: group.memberIds
    .map((id) => teamMembers.find((m) => m.id === id))
    .filter((m) => m !== undefined),
}

// 選択されたグループIDを設定
selectedGroupIdStore.set(groupId || null)

// 週間スケジュールを取得（モックデータを使用）
const weeklySchedule = getWeeklySchedule(group.id, mockCalendarEvents)
---

<Layout title={`${group.name} - 週間スケジュール`}>
  <div class="container">
    <header class="page-header">
      <h1>{group.name}の週間スケジュール</h1>
      <div class="navigation">
        <a href="/" class="back-link">← グループ一覧に戻る</a>
        <div class="week-navigation">
          <button id="prev-week" class="week-btn" title="前週">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
          </button>
          <button id="next-week" class="week-btn" title="次週">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        </div>
      </div>
    </header>

    {weeklySchedule ? (
      <WeeklyCalendarView 
        weeklySchedule={weeklySchedule}
        members={groupWithMembers.members}
      />
    ) : (
      <div class="no-schedule">
        <p>スケジュールデータがありません</p>
      </div>
    )}
  </div>
</Layout>

<script>
  // URLパラメータから現在の週のオフセットを取得
  const urlParams = new URLSearchParams(window.location.search)
  const currentWeekOffset = parseInt(urlParams.get('week') || '0')

  // 前週ボタンのイベントリスナー
  document.getElementById('prev-week')?.addEventListener('click', () => {
    const newOffset = currentWeekOffset - 1
    const newUrl = new URL(window.location.href)
    newUrl.searchParams.set('week', newOffset.toString())
    window.location.href = newUrl.toString()
  })

  // 次週ボタンのイベントリスナー
  document.getElementById('next-week')?.addEventListener('click', () => {
    const newOffset = currentWeekOffset + 1
    const newUrl = new URL(window.location.href)
    newUrl.searchParams.set('week', newOffset.toString())
    window.location.href = newUrl.toString()
  })
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .page-header {
    margin-bottom: 2rem;
  }

  h1 {
    margin: 0 0 1rem 0;
    font-size: 2rem;
    color: #333;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
  }

  .week-navigation {
    display: flex;
    gap: 0.5rem;
  }

  .week-btn {
    width: 36px;
    height: 36px;
    padding: 0;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    background-color: white;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .week-btn:hover {
    background-color: #f0f0f0;
    border-color: #007bff;
    color: #007bff;
  }

  .week-btn:active {
    transform: scale(0.95);
  }

  .back-link {
    color: #007bff;
    text-decoration: none;
    font-size: 0.875rem;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .no-schedule {
    text-align: center;
    padding: 3rem;
    background-color: #f8f9fa;
    border-radius: 8px;
  }

  .no-schedule p {
    color: #6c757d;
    margin: 0;
  }
</style> 