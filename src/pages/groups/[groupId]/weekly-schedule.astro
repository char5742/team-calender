---
import { getLiveCollection } from 'astro:content'
import type { LiveDataEntry } from 'astro'
import Header from '../../../components/Header.astro'
import WeeklyCalendarView from '../../../components/WeeklyCalendarView.astro'
import type { CalendarEvent, Group, TeamMember } from '../../../lib/schema'
import { groupsStore, selectedGroupIdStore, teamMembersStore } from '../../../stores/groupStore'
import type { GroupWithMembers } from '../../../stores/groupStore'
import { currentWeekStartStore, getWeeklySchedule } from '../../../stores/weeklyScheduleStore'
import { addWeeks, formatDate, getWeekStart } from '../../../utils/dateUtils'

// Live コレクションを取得
const groupsEntries = await getLiveCollection('groups')
const membersEntries = await getLiveCollection('teamMembers')
const eventsEntries = await getLiveCollection('events')

const groupsArr: LiveDataEntry<Group>[] = Array.isArray(groupsEntries)
  ? (groupsEntries as LiveDataEntry<Group>[])
  : (groupsEntries?.entries ?? [])
const membersArr: LiveDataEntry<TeamMember>[] = Array.isArray(membersEntries)
  ? (membersEntries as LiveDataEntry<TeamMember>[])
  : (membersEntries?.entries ?? [])
const eventsArr: LiveDataEntry<CalendarEvent>[] = Array.isArray(eventsEntries)
  ? (eventsEntries as LiveDataEntry<CalendarEvent>[])
  : (eventsEntries?.entries ?? [])

const groupsData: Group[] = groupsArr.map((e) => e.data)
const membersData: TeamMember[] = membersArr.map((e) => e.data)
const eventsData: CalendarEvent[] = eventsArr.map((e) => e.data)

if (groupsStore.get().length === 0) {
  groupsStore.set(groupsData)
}
if (teamMembersStore.get().length === 0) {
  teamMembersStore.set(membersData)
}

// 動的ルートのために必要な関数
export async function getStaticPaths() {
  const coll = await (await import('astro:content')).getLiveCollection('groups')
  const arr = Array.isArray(coll) ? coll : (coll?.entries ?? [])
  return arr.map((group: { id: string }) => ({ params: { groupId: group.id } }))
}

// パラメータからグループIDを取得
const { groupId } = Astro.params

// URLパラメータから週のオフセットを取得
const url = new URL(Astro.request.url)
const weekOffset = Number.parseInt(url.searchParams.get('week') || '0')

// 表示する週の開始日を計算
const baseWeekStart = getWeekStart(new Date())
const displayWeekStart = addWeeks(baseWeekStart, weekOffset)

// 一時的に現在の週を設定
currentWeekStartStore.set(displayWeekStart.toISOString())

// グループデータを取得
const groups = groupsStore.get()
const teamMembers = teamMembersStore.get()
const group = groups.find((g) => g.id === groupId)

if (!group) {
  return Astro.redirect('/404')
}

// グループのメンバー情報を取得
const groupWithMembers: GroupWithMembers = {
  ...group,
  members: group.memberIds
    .map((id) => teamMembers.find((m) => m.id === id))
    .filter((m) => m !== undefined),
}

// 選択されたグループIDを設定
selectedGroupIdStore.set(groupId || null)

// 週間スケジュールを取得
const weeklySchedule = getWeeklySchedule(group.id, eventsData)

// 週の開始日と終了日を計算
const weekStart = displayWeekStart
const weekEnd = new Date(weekStart)
weekEnd.setDate(weekEnd.getDate() + 6)
---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{group.name}</title>
    <link rel="stylesheet" href="/src/styles/design-system.css" />
    <link rel="stylesheet" href="/src/styles/animations.css" />
  </head>
  <body>
    <Header currentGroupId={groupId} />
    
    <main class="main">
      <div class="schedule-page">
        <div class="page-header">
          <h1 class="heading-primary">
            {group.name}の週間スケジュール
          </h1>
          <div class="week-info visual-secondary">
            {formatDate(weekStart, 'YYYY年M月D日')} - {formatDate(weekEnd, 'YYYY年M月D日')}
          </div>
        </div>

        <div class="schedule-content">
          {weeklySchedule ? (
            <WeeklyCalendarView 
              weeklySchedule={weeklySchedule} 
              members={groupWithMembers.members}
            />
          ) : (
            <p class="visual-secondary">スケジュールデータがありません</p>
          )}
        </div>
      </div>
    </main>
  </body>
</html>

<script>
  // URLパラメータから現在の週のオフセットを取得
  const urlParams = new URLSearchParams(window.location.search)
  const currentWeekOffset = parseInt(urlParams.get('week') || '0')

  // 前週ボタンのイベントリスナー
  document.getElementById('prev-week')?.addEventListener('click', () => {
    const newOffset = currentWeekOffset - 1
    const newUrl = new URL(window.location.href)
    newUrl.searchParams.set('week', newOffset.toString())
    window.location.href = newUrl.toString()
  })

  // 次週ボタンのイベントリスナー
  document.getElementById('next-week')?.addEventListener('click', () => {
    const newOffset = currentWeekOffset + 1
    const newUrl = new URL(window.location.href)
    newUrl.searchParams.set('week', newOffset.toString())
    window.location.href = newUrl.toString()
  })
</script>

<style>
  body {
    margin: 0;
    padding: 0;
    min-height: 100vh;
    background-color: var(--color-background);
  }

  .main {
    min-height: calc(100vh - 48px); /* ヘッダーの高さ(48px)を引いた高さ */
  }

  /* ウィークリースケジュールページ専用のレイアウト調整 */
  .schedule-page {
    width: 100%;
    padding: var(--spacing-8) 0; /* 左右のパディングを削除（カレンダーコンポーネント側で管理） */
  }

  .page-header {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-4);
    margin-bottom: var(--spacing-8);
    max-width: 1400px;
    margin-left: auto;
    margin-right: auto;
    padding: 0 var(--spacing-6); /* ヘッダーにも同じ余白を追加 */
  }

  .week-info {
    font-size: var(--font-size-lg);
  }

  .schedule-content {
    margin-bottom: var(--spacing-12);
    width: 100%;
    max-width: 100%; /* コンテナーの最大幅を制限 */
    margin-left: auto;
    margin-right: auto;
  }

  /* レスポンシブ調整 */
  @media (max-width: 768px) {
    .schedule-page {
      padding: var(--spacing-4) 0; /* 左右のパディングを削除 */
    }

    .page-header {
      margin-bottom: var(--spacing-6);
      padding: 0 var(--spacing-4); /* モバイルでは余白を小さく */
    }

    .heading-primary {
      font-size: var(--font-size-2xl);
    }

    .week-info {
      font-size: var(--font-size-base);
    }
  }
</style> 